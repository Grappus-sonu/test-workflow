name: Build and Deploy to GKE

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: 'protean_sdk_uat-2.0' 
  PROJECT_ID: 'protean-suraksh-aa-uat'
  GAR_LOCATION: 'asia-south1'
  REPOSITORY: 'uat-artifact-registry-asia-south1'
  SERVICE_ACCOUNT: "abc"
  WIF: ''

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production


    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v3'

      # Configure Workload Identity Federation and generate an access token.
      # - id: 'auth'
      #   name: 'Authenticate to Google Cloud'
      #   uses: 'google-github-actions/auth@v0'
      #   with:
      #     token_format: 'access_token'
      #     workload_identity_provider: '${{ env.WIF }}'
      #     service_account: '${{ env.SERVICE_ACCOUNT }}'
      
      - name: 'Google auth'
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
    
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          project_id: '${{ env.PROJECT_ID }}'

      - name: 'Docker auth'
        run: gcloud auth configure-docker "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      # Get the GKE credentials so we can deploy to the cluster
      # - name: 'Set up GKE credentials'
      #   uses: google-github-actions/get-gke-credentials@v2
      #   with:
      #     cluster_name: ${{ env.GKE_CLUSTER }}
      #     location: ${{ env.GKE_ZONE }}

      - name: "Image List"
        id: "fetch_image_list"
        run: |-
          version=$(\
            gcloud artifacts docker images list --include-tags --quiet "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}" \
            | echo $image_list \
            | awk '{print $3}' \
            | awk '{ max = ($1 > max) ? $1 :/ max } END { print max }' \
          )
          echo "new_version=$( echo $version)" >> $GITHUB_OUTPUT
          # latest_version=$(echo $version_list | awk '{ max = ($1 > max) ? $1 :/ max } END { print max }')
          # echo "new_version=$( echo $latest_version + 1 )" >> $GITHUB_OUTPUT
          #run: echo "IMAGE_VERSION=$(ls | awk -F ':/v' '{print $2}' | awk '{ max = ($1 > max) ? $1 :/ max } END { print max }'" >> $GITHUB_OUTPUT

      - name: 'Logging Images'
        run: echo "Image List = ${{ steps.fetch_image_list.outputs.new_version }}"

      # Set up kustomize
      # - name: Set up Kustomize
      #   run: |-
      #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
      #     chmod u+x ./kustomize
      
      # Deploy the Docker image to the GKE cluster
      # - name: Deploy
      #   run: |-
      #     # replacing the image name in the k8s template
      #     ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}"
      #     ./kustomize build . | kubectl apply -f -
      #     kubectl rollout status deployment/$DEPLOYMENT_NAME
      #     kubectl get services -o wide
